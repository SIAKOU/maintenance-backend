'use strict';

/**
 * @type {import('sequelize-cli').Migration}
 * 
 * Migration complète pour supprimer la colonne first_name de la table users,
 * gérer les vues dépendantes, et offrir un rollback intégral.
 * 
 * Points clés :
 * - Transactions sécurisées
 * - Vérification de l'existence de colonnes
 * - Recréation des vues avec commentaire
 * - Rollback qui restaure la colonne et les vues
 */
module.exports = {
  async up(queryInterface, Sequelize) {
    const transaction = await queryInterface.sequelize.transaction();
    try {
      console.log('--- Migration UP démarrée ---');

      // 1️⃣ Récupérer les définitions actuelles des vues (utile pour audit ou si tu voulais les stocker)
      const [views] = await queryInterface.sequelize.query(`
        SELECT table_name AS viewname, pg_get_viewdef(quote_ident(schemaname)||'.'||quote_ident(viewname), true) AS definition
        FROM pg_views 
        WHERE viewname IN ('urgent_interventions', 'technician_stats')
      `, { transaction });

      console.log('Vues existantes:', views.map(v => v.viewname));

      // 2️⃣ Supprimer les vues dépendantes
      console.log('Suppression des vues...');
      await queryInterface.sequelize.query(`
        DROP VIEW IF EXISTS urgent_interventions CASCADE;
        DROP VIEW IF EXISTS technician_stats CASCADE;
      `, { transaction });

      // 3️⃣ Vérifier et supprimer la colonne first_name
      const tableDescription = await queryInterface.describeTable('users');
      if (tableDescription.first_name) {
        console.log('Suppression de la colonne first_name...');
        await queryInterface.sequelize.query(`
          ALTER TABLE "users" DROP COLUMN "first_name" CASCADE
        `, { transaction });
      } else {
        console.log('Colonne first_name déjà absente, rien à faire.');
      }

      // 4️⃣ Recréer les vues adaptées à la nouvelle structure
      console.log('Recréation des vues...');
      await queryInterface.sequelize.query(`
        CREATE OR REPLACE VIEW urgent_interventions AS
        SELECT 
          id, 
          last_name, 
          email,
          status
        FROM users
        WHERE status = 'urgent'
      `, { transaction });

      await queryInterface.sequelize.query(`
        CREATE OR REPLACE VIEW technician_stats AS
        SELECT 
          u.id,
          u.last_name,
          u.email,
          COUNT(i.id) AS intervention_count,
          AVG(i.duration) AS avg_duration
        FROM users u
        LEFT JOIN interventions i ON u.id = i.technician_id
        GROUP BY u.id, u.last_name, u.email
      `, { transaction });

      // 5️⃣ Ajouter des commentaires descriptifs
      await queryInterface.sequelize.query(`
        COMMENT ON VIEW urgent_interventions IS 'Vue des interventions urgentes sans first_name (v2)'
      `, { transaction });

      await queryInterface.sequelize.query(`
        COMMENT ON VIEW technician_stats IS 'Statistiques techniciens sans first_name (v2)'
      `, { transaction });

      await transaction.commit();
      console.log('✅ Migration UP terminée avec succès.');
    } catch (error) {
      await transaction.rollback();
      console.error('❌ Erreur pendant migration UP:', error);
      throw new Error(`Échec migration UP : ${error.message}`);
    }
  },

  async down(queryInterface, Sequelize) {
    const transaction = await queryInterface.sequelize.transaction();
    try {
      console.log('--- Rollback DOWN démarré ---');

      // 1️⃣ Supprimer les vues actuelles
      console.log('Suppression des vues v2...');
      await queryInterface.sequelize.query(`
        DROP VIEW IF EXISTS urgent_interventions CASCADE;
        DROP VIEW IF EXISTS technician_stats CASCADE;
      `, { transaction });

      // 2️⃣ Rétablir la colonne first_name
      const tableDescription = await queryInterface.describeTable('users');
      if (!tableDescription.first_name) {
        console.log('Ajout de la colonne first_name...');
        await queryInterface.addColumn('users', 'first_name', {
          type: Sequelize.STRING,
          allowNull: true,
          comment: 'Prénom de l\'utilisateur restauré par migration DOWN'
        }, { transaction });
      } else {
        console.log('Colonne first_name déjà existante, pas besoin de recréer.');
      }

      // 3️⃣ Recréer les vues initiales incluant first_name
      console.log('Recréation des vues originales...');
      await queryInterface.sequelize.query(`
        CREATE OR REPLACE VIEW urgent_interventions AS
        SELECT 
          id, 
          first_name, 
          last_name, 
          email,
          status
        FROM users
        WHERE status = 'urgent'
      `, { transaction });

      await queryInterface.sequelize.query(`
        CREATE OR REPLACE VIEW technician_stats AS
        SELECT 
          u.id,
          u.first_name,
          u.last_name,
          u.email,
          COUNT(i.id) AS intervention_count,
          AVG(i.duration) AS avg_duration
        FROM users u
        LEFT JOIN interventions i ON u.id = i.technician_id
        GROUP BY u.id, u.first_name, u.last_name, u.email
      `, { transaction });

      await transaction.commit();
      console.log('✅ Rollback DOWN terminé avec succès.');
    } catch (error) {
      await transaction.rollback();
      console.error('❌ Erreur pendant rollback DOWN:', error);
      throw new Error(`Échec rollback DOWN : ${error.message}`);
    }
  }
};
